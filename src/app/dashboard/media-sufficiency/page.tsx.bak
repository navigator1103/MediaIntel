'use client';

import React, { useState, useEffect, useRef } from 'react';
import Navigation from '@/components/Navigation';
import { 
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,
  PieChart, Pie, Cell, AreaChart, Area, LineChart, Line
} from 'recharts';
import { Spinner } from '@/components/ui/spinner';
import axios from 'axios';

// Color palette for charts
const COLORS = ['#1F4388', '#2A5CAA', '#3E7DCD', '#5E9FE0', '#7FBCE6', '#A0D8EC', '#C1E4F0', '#E2F0F6'];

// Interface for Game Plan data
interface GamePlanData {
  budgetByMediaType: Record<string, number>;
  budgetByCountry: Record<string, number>;
  budgetByCategory: Record<string, number>;
  budgetByCategoryPercentage: Record<string, number>;
  budgetByQuarter: {
    Q1: number;
    Q2: number;
    Q3: number;
    Q4: number;
  };
  campaignsByPMType: Record<string, number>;
  summary: {
    totalBudget: number;
    campaignCount: number;
    mediaTypeCount: number;
    countryCount: number;
    gamePlanCount: number;
    lastUpdate?: string;
  };
}

// Interface for Game Plan
interface GamePlan {
  id: number;
  campaignId: number;
  campaign?: {
    id: number;
    name: string;
  };
  mediaSubTypeId: number;
  mediaSubType?: {
    id: number;
    name: string;
    mediaType?: {
      id: number;
      name: string;
    };
  };
  countryId: number;
  country?: {
    id: number;
    name: string;
  };
  pmTypeId?: number;
  pmType?: {
    id: number;
    name: string;
  };
  category_id?: number;
  category?: {
    id: number;
    name: string;
  };
  totalBudget: number;
  q1Budget: number;
  q2Budget: number;
  q3Budget: number;
  q4Budget: number;
}

export default function MediaSufficiencyDashboard() {
  // State for data
  const [gamePlanData, setGamePlanData] = useState<GamePlanData | null>(null);
  const [gamePlans, setGamePlans] = useState<GamePlan[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // State for filters
  const [selectedYear, setSelectedYear] = useState('2025');
  const [selectedMediaTypes, setSelectedMediaTypes] = useState<string[]>([]);
  const [selectedCountries, setSelectedCountries] = useState<string[]>([]);
  const [selectedPMTypes, setSelectedPMTypes] = useState<string[]>([]);
  const [budgetRange, setBudgetRange] = useState<[number, number]>([0, 1000000]);
  const [lastUpdateDate, setLastUpdateDate] = useState<string>('');
  
  // State for sidebar
  const [sidebarExpanded, setSidebarExpanded] = useState(true);
  
  // State for filtered data
  const [filteredData, setFilteredData] = useState<GamePlanData | null>(null);
  
  // State for campaign distribution data
  const [campaignDistributionData, setCampaignDistributionData] = useState<Array<{name: string; value: number; color: string}>>([]);
  const [activeFilter, setActiveFilter] = useState<string | null>(null);
  
  // Refs for charts
  const campaignChartRef = useRef<HTMLDivElement>(null);
  const mediaTypeChartRef = useRef<HTMLDivElement>(null);
  const countryChartRef = useRef<HTMLDivElement>(null);
  
  // Fetch Game Plan data
  useEffect(() => {
    const fetchGamePlanData = async () => {
      try {
        setIsLoading(true);
        
        // Fetch aggregated dashboard data
        const dashboardResponse = await axios.get('/api/dashboard/media-similarity');
        
        // Add lastUpdate field if not present
        if (dashboardResponse.data && dashboardResponse.data.summary && !dashboardResponse.data.summary.lastUpdate) {
          dashboardResponse.data.summary.lastUpdate = new Date().toISOString();
        }
        
        setGamePlanData(dashboardResponse.data);
        setFilteredData(dashboardResponse.data); // Initialize filtered data with all data
        
        try {
          // Fetch raw game plans data for the Campaign by Quarter table
          const gamePlansResponse = await axios.get('/api/admin/media-sufficiency/game-plans');
          setGamePlans(gamePlansResponse.data || []);
        } catch (gamePlansError) {
          console.error('Error fetching game plans:', gamePlansError);
          // Continue with the dashboard even if game plans fetch fails
          // This ensures the rest of the dashboard still works
        }
        
        setError(null);
        
        // Set initial budget range based on data
        if (dashboardResponse.data && dashboardResponse.data.summary) {
          setBudgetRange([0, dashboardResponse.data.summary.totalBudget]);
        }
        
        // Set last update date
        if (dashboardResponse.data && dashboardResponse.data.summary && dashboardResponse.data.summary.lastUpdate) {
          setLastUpdateDate(dashboardResponse.data.summary.lastUpdate);
        }
        
        // Generate campaign distribution data
        if (dashboardResponse.data && dashboardResponse.data.budgetByCategoryPercentage) {
          // Use the category percentage data from the API
          const distributionData = Object.entries(dashboardResponse.data.budgetByCategoryPercentage)
            .map(([name, percentage], index) => {
              // Get the absolute budget value for this category
              const absoluteBudget = dashboardResponse.data.budgetByCategory[name] as number;
              
              return {
                name,
                value: percentage as number, // Use percentage values for the chart
                absoluteBudget: absoluteBudget, // Keep absolute budget for tooltip
                color: COLORS[index % COLORS.length]
              };
            })
            // Sort by percentage value (descending)
            .sort((a, b) => b.value - a.value);
          
          setCampaignDistributionData(distributionData);
        }
      } catch (err) {
        console.error('Error fetching game plan data:', err);
        setError('Failed to load dashboard data. Please try again later.');
      } finally {
        setIsLoading(false);
      }
    };

    fetchGamePlanData();
  }, [selectedYear]);
  
  // Toggle sidebar expansion
  const toggleSidebar = () => {
    setSidebarExpanded(!sidebarExpanded);
  };
  
  // Handle media type selection
  const toggleMediaType = (mediaType: string) => {
    setSelectedMediaTypes(prev => 
      prev.includes(mediaType) 
        ? prev.filter(type => type !== mediaType) 
        : [...prev, mediaType]
    );
  };
  
  // Handle country selection
  const toggleCountry = (country: string) => {
    setSelectedCountries(prev => 
      prev.includes(country) 
        ? prev.filter(c => c !== country) 
        : [...prev, country]
    );
  };
  
  // Handle PM type selection
  const togglePMType = (pmType: string) => {
    setSelectedPMTypes(prev => 
      prev.includes(pmType) 
        ? prev.filter(type => type !== pmType) 
        : [...prev, pmType]
    );
  };
  
  // Handle campaign distribution chart click
  const handleCampaignBarClick = (data: any) => {
    console.log('Campaign bar clicked:', data);
    // Toggle filter - if already selected, clear the filter
    if (activeFilter === data.name) {
      setActiveFilter(null);
    } else {
      setActiveFilter(data.name);
    }
  };
  
  // Handle budget range change
  const handleBudgetRangeChange = (range: [number, number]) => {
    setBudgetRange(range);
  };
  
  // Handle last update date change
  const handleLastUpdateChange = (date: string) => {
    setLastUpdateDate(date);
  };
  
  // Clear all filters
  const clearAllFilters = () => {
    setSelectedMediaTypes([]);
    setSelectedCountries([]);
    setSelectedPMTypes([]);
    if (gamePlanData && gamePlanData.summary) {
      setBudgetRange([0, gamePlanData.summary.totalBudget]);
    }
    setLastUpdateDate('');
    setFilteredData(gamePlanData);
  };

  return (
    <div className="flex flex-col bg-gray-50 min-h-screen">
      {/* Top Navigation */}
      <Navigation />
      
      {/* Dashboard Header */}
      <div className="border-b border-gray-200 px-6 py-4 mt-16">
        <h1 className="text-2xl font-bold text-gray-800">Media Sufficiency Dashboard</h1>
        <p className="text-gray-600 mt-1">Game Plans Overview and Budget Analysis</p>
      </div>
      
      {/* Main Content with Sidebar */}
      <div className="flex flex-1 overflow-hidden">
        {/* Sidebar */}
        <div className={`${sidebarExpanded ? 'w-64' : 'w-16'} bg-white border-r border-gray-200 transition-all duration-300 flex flex-col`}>
          <div className="p-4 border-b border-gray-200 flex justify-between items-center">
            <h2 className={`${sidebarExpanded ? 'block' : 'hidden'} text-lg font-medium text-gray-700`}>Filters</h2>
            <button 
              onClick={toggleSidebar}
              className="p-1 rounded-md hover:bg-gray-100"
            >
              {sidebarExpanded ? (
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
                </svg>
              ) : (
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                </svg>
              )}
            </button>
          </div>
          
          <div className="p-4 overflow-y-auto flex-1">
            {/* Year Filter */}
            <div className="mb-6">
              <h3 className={`${sidebarExpanded ? 'block' : 'hidden'} text-sm font-medium text-gray-500 mb-2`}>Fiscal Year</h3>
              <select
                value={selectedYear}
                onChange={(e) => setSelectedYear(e.target.value)}
                className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm bg-white"
              >
                <option value="2025">FY 2025</option>
                <option value="2024">FY 2024</option>
                <option value="2023">FY 2023</option>
              </select>
            </div>
            
            {/* Last Update Filter - New Addition */}
            <div className="mb-6">
              <h3 className={`${sidebarExpanded ? 'block' : 'hidden'} text-sm font-medium text-gray-500 mb-2`}>Last Update</h3>
              <div className={`${sidebarExpanded ? 'block' : 'hidden'}`}>
                <input
                  type="date"
                  value={lastUpdateDate ? new Date(lastUpdateDate).toISOString().split('T')[0] : ''}
                  onChange={(e) => handleLastUpdateChange(e.target.value)}
                  className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm bg-white"
                />
                {lastUpdateDate && (
                  <div className="mt-1 text-xs text-gray-500">
                    Last updated: {new Date(lastUpdateDate).toLocaleDateString()}
                  </div>
                )}
              </div>
            </div>
            
            {/* Media Type Filter */}
            {gamePlanData && (
              <div className="mb-6">
                <h3 className={`${sidebarExpanded ? 'block' : 'hidden'} text-sm font-medium text-gray-500 mb-2`}>Media Type</h3>
                <div className="space-y-1">
                  {Object.keys(gamePlanData.budgetByMediaType).map(mediaType => (
                    <div key={mediaType} className="flex items-center">
                      <input
                        id={`media-${mediaType}`}
                        type="checkbox"
                        checked={selectedMediaTypes.includes(mediaType)}
                        onChange={() => toggleMediaType(mediaType)}
                        className="h-4 w-4 text-indigo-600 border-gray-300 rounded"
                      />
                      <label 
                        htmlFor={`media-${mediaType}`} 
                        className={`${sidebarExpanded ? 'block' : 'hidden'} ml-2 text-sm text-gray-700`}
                      >
                        {mediaType}
                      </label>
                    </div>
                  ))}
                </div>
              </div>
            )}
            
            {/* Country Filter */}
            {gamePlanData && (
              <div className="mb-6">
                <h3 className={`${sidebarExpanded ? 'block' : 'hidden'} text-sm font-medium text-gray-500 mb-2`}>Country</h3>
                <div className="space-y-1 max-h-40 overflow-y-auto">
                  {Object.keys(gamePlanData.budgetByCountry).map(country => (
                    <div key={country} className="flex items-center">
                      <input
                        id={`country-${country}`}
                        type="checkbox"
                        checked={selectedCountries.includes(country)}
                        onChange={() => toggleCountry(country)}
                        className="h-4 w-4 text-indigo-600 border-gray-300 rounded"
                      />
                      <label 
                        htmlFor={`country-${country}`} 
                        className={`${sidebarExpanded ? 'block' : 'hidden'} ml-2 text-sm text-gray-700`}
                      >
                        {country}
                      </label>
                    </div>
                  ))}
                </div>
              </div>
            )}
            
            {/* PM Type Filter */}
            {gamePlanData && (
              <div className="mb-6">
                <h3 className={`${sidebarExpanded ? 'block' : 'hidden'} text-sm font-medium text-gray-500 mb-2`}>PM Type</h3>
                <div className="space-y-1">
                  {Object.keys(gamePlanData.campaignsByPMType).map(pmType => (
                    <div key={pmType} className="flex items-center">
                      <input
                        id={`pm-${pmType}`}
                        type="checkbox"
                        checked={selectedPMTypes.includes(pmType)}
                        onChange={() => togglePMType(pmType)}
                        className="h-4 w-4 text-indigo-600 border-gray-300 rounded"
                      />
                      <label 
                        htmlFor={`pm-${pmType}`} 
                        className={`${sidebarExpanded ? 'block' : 'hidden'} ml-2 text-sm text-gray-700`}
                      >
                        {pmType}
                      </label>
                    </div>
                  ))}
                </div>
              </div>
            )}
            
            {/* Clear Filters Button */}
            <button
              onClick={clearAllFilters}
              className={`${sidebarExpanded ? 'block' : 'hidden'} w-full mt-4 bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium py-2 px-4 rounded-md text-sm`}
            >
              Clear All Filters
            </button>
          </div>
        </div>
        
        {/* Main Content Area */}
        <div className="flex-1 p-6 overflow-y-auto">
          {isLoading ? (
            <div className="flex items-center justify-center h-64">
              <Spinner />
            </div>
          ) : error ? (
            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md">
              {error}
            </div>
          ) : filteredData ? (
            <>
              {/* Summary Cards */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                <div className="bg-white rounded-lg shadow p-4 flex items-center">
                  <div className="p-3 rounded-full bg-indigo-100 text-indigo-600 mr-4">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <div>
                    <div className="text-sm text-gray-500 mb-1">Total Budget</div>
                    <div className="text-2xl font-semibold text-indigo-600">€{filteredData.summary.totalBudget.toLocaleString()}</div>
                  </div>
                </div>
                <div className="bg-white rounded-lg shadow p-4 flex items-center">
                  <div className="p-3 rounded-full bg-blue-100 text-blue-600 mr-4">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                    </svg>
                  </div>
                  <div>
                    <div className="text-sm text-gray-500 mb-1">Campaigns</div>
                    <div className="text-2xl font-semibold text-blue-600">{filteredData.summary.campaignCount}</div>
                  </div>
                </div>
                <div className="bg-white rounded-lg shadow p-4 flex items-center">
                  <div className="p-3 rounded-full bg-green-100 text-green-600 mr-4">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 12l3-3 3 3 4-4M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z" />
                    </svg>
                  </div>
                  <div>
                    <div className="text-sm text-gray-500 mb-1">Media Types</div>
                    <div className="text-2xl font-semibold text-green-600">{filteredData.summary.mediaTypeCount}</div>
                  </div>
                </div>
                <div className="bg-white rounded-lg shadow p-4 flex items-center">
                  <div className="p-3 rounded-full bg-purple-100 text-purple-600 mr-4">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <div>
                    <div className="text-sm text-gray-500 mb-1">Countries</div>
                    <div className="text-2xl font-semibold text-purple-600">{filteredData.summary.countryCount}</div>
                  </div>
                </div>
              </div>
              
              {/* Charts Row 1 */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                {/* Campaign Distribution Chart */}
                <div className="bg-white rounded-lg shadow p-4" ref={campaignChartRef}>
                  <div className="flex justify-between items-center mb-4">
                    <h2 className="text-lg font-semibold text-gray-800">Campaign Distribution</h2>
                    <div className="text-xs text-gray-500">
                      Click on bars to filter dashboard
                    </div>
                  </div>
                  {isLoading ? (
                    <div className="flex justify-center items-center h-[300px]">
                      <Spinner />
                    </div>
                  ) : (
                    <div className="flex flex-col h-full">
                      <ResponsiveContainer width="100%" height={300}>
                        <BarChart
                          data={campaignDistributionData}
                          margin={{ top: 20, right: 30, left: 20, bottom: 30 }}
                          onClick={handleCampaignBarClick}
                        >
                          <CartesianGrid strokeDasharray="3 3" vertical={false} />
                          <XAxis dataKey="name" axisLine={false} tickLine={false} />
                          <YAxis 
                            axisLine={false} 
                            tickLine={false} 
                            tickFormatter={(value) => `${value}%`}
                            domain={[0, 'dataMax']} 
                          />
                          <Tooltip 
                            formatter={(value, name, props) => {
                              // For the value (percentage)
                              if (typeof value === 'number') {
                                // Get the absolute budget from the entry
                                const entry = props.payload;
                                const absoluteBudget = entry?.absoluteBudget;
                                
                                // Show both percentage and absolute budget
                                return [
                                  `${value.toFixed(2)}%`,
                                  `€${absoluteBudget?.toLocaleString() || '0'}`
                                ];
                              }
                              return value;
                            }}
                            labelFormatter={(label) => `Category: ${label}`}
                            labelStyle={{ color: '#333', fontWeight: 'bold' }}
                            itemStyle={{ padding: '2px 0' }}
                          />
                          <Legend 
                            verticalAlign="bottom" 
                            height={36} 
                            content={() => (
                              <div className="flex justify-center items-center mt-2">
                                <div className="bg-black w-4 h-4 mr-2"></div>
                                <span className="text-sm">Percentage</span>
                              </div>
                            )}
                          />
                          <Bar 
                            dataKey="value" 
                            name="Budget %" 
                            radius={[4, 4, 0, 0]}
                            isAnimationActive={false}
                            onClick={(data) => handleCampaignBarClick(data)}
                          >
                            {campaignDistributionData.map((entry, index) => (
                              <Cell 
                                key={`cell-${index}`} 
                                fill={COLORS[index % COLORS.length]} 
                                stroke={activeFilter === entry.name ? '#000' : 'none'}
                                strokeWidth={activeFilter === entry.name ? 2 : 0}
                              />
                            ))}
                          </Bar>
                        </BarChart>
                      </ResponsiveContainer>
                    </div>
                  )}
                </div>
                
                {/* Campaign by Quarter */}
                <div className="bg-white rounded-lg shadow p-4">
                  <h2 className="text-lg font-semibold text-gray-800 mb-4">Campaign by Quarter</h2>
                  {isLoading ? (
                    <div className="flex justify-center items-center h-[300px]">
                      <Spinner />
                    </div>
                  ) : gamePlans.length === 0 ? (
                    <div className="flex justify-center items-center h-[200px] text-gray-500">
                      <div className="text-center">
                        <p className="mb-2">No detailed campaign data available.</p>
                        <p className="text-sm">Upload game plans with campaign details to see quarterly breakdown.</p>
                      </div>
                    </div>
                  ) : (
                    <div className="overflow-x-auto" style={{ maxHeight: '300px' }}>
                      <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50 sticky top-0">
                          <tr>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Country</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Campaign</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Q1</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Q2</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Q3</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Q4</th>
                          </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                          {filteredData && Object.entries(filteredData.budgetByCountry)
                            .sort((a, b) => (b[1] as number) - (a[1] as number))
                            .slice(0, 10)
                            .flatMap(([country], countryIndex) => {
                              // Get all campaigns for this country
                              const countryCampaigns = gamePlans.filter((plan: GamePlan) => 
                                plan.country?.name === country
                              );
                              
                              // If no campaigns found for this country, return empty array
                              if (countryCampaigns.length === 0) {
                                return [];
                              }
                              
                              // Group campaigns by campaign name
                              const campaignGroups: Record<string, {
                                name: string;
                                total: number;
                                q1: number;
                                q2: number;
                                q3: number;
                                q4: number;
                              }> = {};
                              
                              countryCampaigns.forEach((plan: GamePlan) => {
                                const campaignName = plan.campaign?.name || 'Unknown';
                                
                                if (!campaignGroups[campaignName]) {
                                  campaignGroups[campaignName] = {
                                    name: campaignName,
                                    total: 0,
                                    q1: 0,
                                    q2: 0,
                                    q3: 0,
                                    q4: 0
                                  };
                                }
                                
                                campaignGroups[campaignName].total += Number(plan.totalBudget) || 0;
                                campaignGroups[campaignName].q1 += Number(plan.q1Budget) || 0;
                                campaignGroups[campaignName].q2 += Number(plan.q2Budget) || 0;
                                campaignGroups[campaignName].q3 += Number(plan.q3Budget) || 0;
                                campaignGroups[campaignName].q4 += Number(plan.q4Budget) || 0;
                              });
                              
                              // Convert to array and sort by total budget
                              const campaigns = Object.values(campaignGroups)
                                .filter(campaign => campaign.total > 0)
                                .sort((a, b) => b.total - a.total);
                              
                              // If no campaigns with budget found, return empty array
                              if (campaigns.length === 0) {
                                return [];
                              }
                              
                              // Create rows for each campaign
                              return campaigns.map((campaign, campaignIndex) => (
                                <tr 
                                  key={`${country}-${campaign.name}-${campaignIndex}`}
                                  className={campaignIndex % 2 === 0 ? 'bg-white' : 'bg-gray-50'}
                                >
                                  {campaignIndex === 0 ? (
                                    <td 
                                      className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900"
                                      rowSpan={campaigns.length}
                                    >
                                      {country}
                                    </td>
                                  ) : null}
                                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    {campaign.name}
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    € {campaign.total.toLocaleString()}
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    {campaign.q1 > 0 ? `€ ${campaign.q1.toLocaleString()}` : '-'}
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    {campaign.q2 > 0 ? `€ ${campaign.q2.toLocaleString()}` : '-'}
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    {campaign.q3 > 0 ? `€ ${campaign.q3.toLocaleString()}` : '-'}
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    {campaign.q4 > 0 ? `€ ${campaign.q4.toLocaleString()}` : '-'}
                                  </td>
                                </tr>
                              ));
                            })}
                          
                          {/* Show a message if no data is displayed in the table */}
                          {filteredData && Object.entries(filteredData.budgetByCountry).length > 0 && 
                           gamePlans.length > 0 && (
                            <tr>
                              <td colSpan={7} className="px-6 py-4 text-center text-gray-500">
                                No campaign data available for the selected filters.
                              </td>
                            </tr>
                          )}
                        </tbody>
                      </table>
                    </div>
                  )}
                </div>
                </div>
              </div>
              
              {/* Charts Row 2 */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                {/* Top Countries by Budget */}
                <div className="bg-white rounded-lg shadow p-4" ref={countryChartRef}>
                  <h2 className="text-lg font-semibold text-gray-800 mb-4">Top Countries by Budget</h2>
                  <div className="h-64">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart
                        data={Object.entries(filteredData.budgetByCountry)
                          .sort((a, b) => b[1] - a[1])
                          .slice(0, 5)
                          .map(([country, budget]) => ({ country, budget }))}
                        layout="vertical"
                        margin={{ top: 5, right: 30, left: 50, bottom: 5 }}
                      >
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis type="number" />
                        <YAxis dataKey="country" type="category" width={80} />
                        <Tooltip formatter={(value) => typeof value === 'number' ? `€${value.toLocaleString()}` : `€${value}`} />
                        <Bar 
                          dataKey="budget" 
                          fill="#3E7DCD" 
                          onClick={(data) => toggleCountry(data.country)}
                        >
                          {Object.entries(filteredData.budgetByCountry)
                            .sort((a, b) => b[1] - a[1])
                            .slice(0, 5)
                            .map(([country], index) => (
                              <Cell 
                                key={`cell-${index}`} 
                                fill={selectedCountries.includes(country) ? '#ff7300' : '#3E7DCD'} 
                              />
                            ))}
                        </Bar>
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </div>
                
                {/* Campaigns by PM Type */}
                <div className="bg-white rounded-lg shadow p-4">
                  <h2 className="text-lg font-semibold text-gray-800 mb-4">Campaigns by PM Type</h2>
                  <div className="h-64">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart
                        data={Object.entries(filteredData.campaignsByPMType).map(([type, count]) => ({
                          type,
                          count
                        }))}
                        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                      >
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="type" />
                        <YAxis />
                        <Tooltip />
                        <Bar 
                          dataKey="count" 
                          name="Campaign Count" 
                          fill="#5E9FE0" 
                          onClick={(data) => togglePMType(data.type)}
                        >
                          {Object.entries(filteredData.campaignsByPMType).map(([type], index) => (
                            <Cell 
                              key={`cell-${index}`} 
                              fill={selectedPMTypes.includes(type) ? '#ff7300' : '#5E9FE0'} 
                            />
                          ))}
                        </Bar>
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              </div>
              
              {/* Budget Timeline Chart - New Addition */}
              <div className="bg-white rounded-lg shadow p-4 mb-6">
                <h2 className="text-lg font-semibold text-gray-800 mb-4">Budget Timeline</h2>
                <div className="h-64">
                  <ResponsiveContainer width="100%" height="100%">
                    <AreaChart
                      data={[
                        { month: 'Jan', budget: filteredData.budgetByQuarter.Q1 / 3 },
                        { month: 'Feb', budget: filteredData.budgetByQuarter.Q1 / 3 },
                        { month: 'Mar', budget: filteredData.budgetByQuarter.Q1 / 3 },
                        { month: 'Apr', budget: filteredData.budgetByQuarter.Q2 / 3 },
                        { month: 'May', budget: filteredData.budgetByQuarter.Q2 / 3 },
                        { month: 'Jun', budget: filteredData.budgetByQuarter.Q2 / 3 },
                        { month: 'Jul', budget: filteredData.budgetByQuarter.Q3 / 3 },
                        { month: 'Aug', budget: filteredData.budgetByQuarter.Q3 / 3 },
                        { month: 'Sep', budget: filteredData.budgetByQuarter.Q3 / 3 },
                        { month: 'Oct', budget: filteredData.budgetByQuarter.Q4 / 3 },
                        { month: 'Nov', budget: filteredData.budgetByQuarter.Q4 / 3 },
                        { month: 'Dec', budget: filteredData.budgetByQuarter.Q4 / 3 }
                      ]}
                      margin={{ top: 10, right: 30, left: 0, bottom: 0 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="month" />
                      <YAxis />
                      <Tooltip formatter={(value) => typeof value === 'number' ? `€${value.toLocaleString()}` : `€${value}`} />
                      <Area type="monotone" dataKey="budget" stroke="#1F4388" fill="#3E7DCD" fillOpacity={0.3} />
                    </AreaChart>
                  </ResponsiveContainer>
                </div>
              </div>
            </>
          ) : (
            <div className="text-center text-gray-500 py-4">
              No game plan data available
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
