'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { FiCheckCircle, FiAlertTriangle, FiArrowLeft, FiArrowRight, FiLoader } from 'react-icons/fi';

interface MasterDataSummary {
  subRegionsCount: number;
  countriesCount: number;
  categoriesCount: number;
  rangesCount: number;
  mediaTypesCount: number;
  mediaSubtypesCount: number;
  businessUnitsCount: number;
  pmTypesCount?: number;
}

interface SessionData {
  sessionId: string;
  fileName: string;
  fileSize: number;
  recordCount: number;
  timestamp: string;
  status: string;
  masterData: MasterDataSummary;
}

export default function ValidateMediaSufficiency() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const sessionId = searchParams.get('sessionId');
  
  const [sessionData, setSessionData] = useState<SessionData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [masterDataDetails, setMasterDataDetails] = useState<any | null>(null);
  const [validationStatus, setValidationStatus] = useState<'idle' | 'validating' | 'success' | 'error'>('idle');
  const [importStatus, setImportStatus] = useState<'idle' | 'importing' | 'success' | 'error'>('idle');
  const [importResults, setImportResults] = useState<any | null>(null);
  const [editingConflict, setEditingConflict] = useState<any | null>(null);
  const [showEditModal, setShowEditModal] = useState(false);
  const [editedSubregion, setEditedSubregion] = useState<string>('');
  const [currentClusterIndex, setCurrentClusterIndex] = useState(0);
  const [clusteredConflicts, setClusteredConflicts] = useState<any[][]>([]);
  
  // Function to handle navigation back to upload page
  const handleBack = () => {
    router.push('/admin/media-sufficiency');
  };

  // Function to handle navigation to review page
  const handleGoToReview = () => {
    if (!sessionId) return;
    router.push(`/admin/media-sufficiency/review?sessionId=${sessionId}`);
  };
  
  if (loading) {
    return (
      <div className="p-6 max-w-7xl mx-auto">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold font-quicksand text-gray-800">Validating Data</h1>
          <button
            onClick={handleBack}
            className="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition-colors font-quicksand"
          >
            Back
          </button>
        </div>
        
        <div className="bg-white rounded-lg shadow-md p-8 flex flex-col items-center justify-center">
          <FiLoader className="h-12 w-12 text-indigo-600 animate-spin mb-4" />
          <p className="text-lg text-gray-700">Loading session data...</p>
        </div>
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="p-6 max-w-7xl mx-auto">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold font-quicksand text-gray-800">Error</h1>
          <button
            onClick={handleBack}
            className="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition-colors font-quicksand"
          >
            Back
          </button>
        </div>
        
        <div className="bg-white rounded-lg shadow-md p-8 flex flex-col items-center justify-center">
          <div className="flex items-center text-red-500 mb-4">
            <FiAlertTriangle className="h-6 w-6 mr-2" />
            <h2 className="text-xl font-medium">Error</h2>
          </div>
          <p className="text-gray-700 mb-6">{error}</p>
          <button
            onClick={handleBack}
            className="px-6 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors font-quicksand"
          >
            Go Back
          </button>
        </div>
      </div>
    );
  }
  
  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-3xl font-bold font-quicksand text-gray-800">Validate Media Sufficiency Data</h1>
        <button
          onClick={handleBack}
          className="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition-colors font-quicksand"
        >
          Back
        </button>
      </div>
      
      {/* Rest of your component... */}
    </div>
  );
}
