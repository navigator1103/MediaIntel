generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./golden_rules.db"
  relationMode = "prisma"
}

model User {
  id                  Int             @id @default(autoincrement())
  email               String          @unique
  name                String?
  password            String
  role                String          @default("user")
  createdAt           DateTime        @default(now()) @map("created_at")
  updatedAt           DateTime        @updatedAt @map("updated_at")
  accessibleBrands    String?         @map("accessible_brands")
  accessibleCountries String?         @map("accessible_countries")
  accessiblePages     String?         @map("accessible_pages")
  changeRequests      ChangeRequest[]

  @@map("users")
}

model Region {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  countries Country[]

  @@map("regions")
}

model Country {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  regionId         Int               @map("region_id")
  subRegionId      Int?              @map("sub_region_id")
  clusterId        Int?              @map("cluster_id")
  createdAt        DateTime          @default(now()) @map("created_at")
  region           Region            @relation(fields: [regionId], references: [id])
  subRegion        SubRegion?        @relation(fields: [subRegionId], references: [id])
  cluster          Cluster?          @relation(fields: [clusterId], references: [id])
  fiveStarsRatings FiveStarsRating[]
  scores           Score[]
  taxonomyScores   TaxonomyScore[]

  @@map("countries")
}

model Brand {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  createdAt        DateTime          @default(now()) @map("created_at")
  fiveStarsRatings FiveStarsRating[]
  scores           Score[]
  taxonomyScores   TaxonomyScore[]

  @@map("brands")
}

model Rule {
  id          Int      @id @default(autoincrement())
  platform    String
  title       String
  description String
  category    String
  status      String   @default("active")
  priority    String   @default("medium")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  scores      Score[]

  @@map("rules")
}

model Score {
  id             Int             @id @default(autoincrement())
  ruleId         Int             @map("rule_id")
  platform       String
  countryId      Int             @map("country_id")
  brandId        Int             @map("brand_id")
  score          Int
  trend          Int             @default(0)
  month          String
  evaluation     String          @default("NA")
  status         String          @default("Normal")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  changeRequests ChangeRequest[]
  rule           Rule            @relation(fields: [ruleId], references: [id])
  country        Country         @relation(fields: [countryId], references: [id])
  brand          Brand           @relation(fields: [brandId], references: [id])

  @@map("scores")
}

model ChangeRequest {
  id             Int      @id @default(autoincrement())
  scoreId        Int      @map("score_id")
  userId         Int?     @map("user_id")
  requestedScore Int      @map("requested_score")
  comments       String
  status         String   @default("Submitted for Review")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  user           User?    @relation(fields: [userId], references: [id])
  score          Score    @relation(fields: [scoreId], references: [id])

  @@map("change_requests")
}

model FiveStarsCriterion {
  id          Int               @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  ratings     FiveStarsRating[]

  @@map("five_stars_criteria")
}

model FiveStarsRating {
  id          Int                @id @default(autoincrement())
  criterionId Int                @map("criterion_id")
  countryId   Int                @map("country_id")
  brandId     Int                @map("brand_id")
  rating      Int                @default(0)
  month       String
  comments    String?
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @updatedAt @map("updated_at")
  brand       Brand              @relation(fields: [brandId], references: [id])
  country     Country            @relation(fields: [countryId], references: [id])
  criterion   FiveStarsCriterion @relation(fields: [criterionId], references: [id])

  @@unique([criterionId, countryId, brandId, month])
  @@map("five_stars_ratings")
}

model TaxonomyScore {
  id           Int      @id @default(autoincrement())
  countryId    Int      @map("country_id")
  brandId      Int?     @map("brand_id")
  platform     String?
  month        String
  l1Score      Int      @map("l1_score")
  l2Score      Int      @map("l2_score")
  l3Score      Int      @map("l3_score")
  averageScore Int      @map("average_score")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  brand        Brand?   @relation(fields: [brandId], references: [id])
  country      Country  @relation(fields: [countryId], references: [id])

  @@unique([countryId, brandId, platform, month])
  @@map("taxonomy_scores")
}

model SubRegion {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  countries Country[]
  msCountries MSCountry[]

  @@map("sub_regions")
}

model Cluster {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  countries Country[]

  @@map("clusters")
}

model Category {
  id        Int                 @id @default(autoincrement())
  name      String              @unique
  createdAt DateTime            @default(now()) @map("created_at")
  updatedAt DateTime            @updatedAt @map("updated_at")
  ranges    CategoryToRange[]
  ranges_ms MSCategoryToRange[]

  @@map("categories")
}

model Range {
  id         Int                 @id @default(autoincrement())
  name       String              @unique
  createdAt  DateTime            @default(now()) @map("created_at")
  updatedAt  DateTime            @updatedAt @map("updated_at")
  categories CategoryToRange[]
  campaigns  Campaign[]

  @@map("ranges")
}

model CategoryToRange {
  categoryId Int      @map("category_id")
  rangeId    Int      @map("range_id")
  category   Category @relation(fields: [categoryId], references: [id])
  range      Range    @relation(fields: [rangeId], references: [id])

  @@id([categoryId, rangeId])
  @@map("category_to_range")
}

model LastUpdate {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("last_updates")
}

model PMType {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  mediaSubTypes PMTypeToMediaSubType[]
  pendingCampaignMedia PendingCampaignMedia[]

  @@map("pm_types")
}

model MediaType {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  mediaSubTypes MediaSubType[]

  @@map("media_types")
}

model MediaSubType {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  mediaTypeId Int       @map("media_type_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  mediaType   MediaType @relation(fields: [mediaTypeId], references: [id])
  pmTypes     PMTypeToMediaSubType[]
  pendingCampaignMedia PendingCampaignMedia[]

  @@map("media_sub_types")
}

model PMTypeToMediaSubType {
  pmTypeId      Int         @map("pm_type_id")
  mediaSubTypeId Int        @map("media_sub_type_id")
  pmType        PMType      @relation(fields: [pmTypeId], references: [id])
  mediaSubType  MediaSubType @relation(fields: [mediaSubTypeId], references: [id])

  @@id([pmTypeId, mediaSubTypeId])
  @@map("pm_type_to_media_sub_type")
}

model BusinessUnit {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  pendingCampaigns PendingCampaign[]

  @@map("business_units")
}

model Campaign {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  rangeId   Int?      @map("range_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  range     Range?    @relation(fields: [rangeId], references: [id])

  @@map("campaigns")
}

// Media Sufficiency specific models
model MSCountry {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  subRegionId Int?      @map("sub_region_id")
  cluster     String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  subRegion   SubRegion? @relation(fields: [subRegionId], references: [id])
  pendingCampaigns PendingCampaign[]

  @@map("ms_countries")
}

model MSCategoryToRange {
  category_id Int
  range_id    Int
  updated_at  DateTime @updatedAt

  @@id([category_id, range_id])
  @@map("ms_category_to_range")
  category   Category @relation(fields: [category_id], references: [id])
}

// Models for the import process
model PendingCampaignData {
  id              Int       @id @default(autoincrement())
  uploadSessionId String    @map("upload_session_id")
  status          String    @default("pending")
  comments        String?
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  pendingCampaigns PendingCampaign[]

  @@map("pending_campaign_data")
}

model PendingCampaign {
  id              Int       @id @default(autoincrement())
  pendingDataId   Int       @map("pending_data_id")
  name            String
  countryId       Int       @map("country_id")
  rangeId         Int       @map("range_id")
  businessUnitId  Int?      @map("business_unit_id")
  year            Int
  burst           Int       @default(1)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  pendingData     PendingCampaignData @relation(fields: [pendingDataId], references: [id])
  country         MSCountry @relation(fields: [countryId], references: [id])
  businessUnit    BusinessUnit? @relation(fields: [businessUnitId], references: [id])
  pendingCampaignMedia PendingCampaignMedia[]

  @@map("pending_campaigns")
}

model PendingCampaignMedia {
  id                Int       @id @default(autoincrement())
  pendingCampaignId Int       @map("pending_campaign_id")
  mediaSubtypeId    Int       @map("media_subtype_id")
  pmTypeId          Int?      @map("pm_type_id")
  startDate         DateTime  @map("start_date")
  endDate           DateTime  @map("end_date")
  totalBudget       Float     @map("total_budget")
  q1Budget          Float?    @map("q1_budget")
  q2Budget          Float?    @map("q2_budget")
  q3Budget          Float?    @map("q3_budget")
  q4Budget          Float?    @map("q4_budget")
  trps              Float?
  reach1Plus        Float?    @map("reach_1_plus")
  reach3Plus        Float?    @map("reach_3_plus")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  pendingCampaign   PendingCampaign @relation(fields: [pendingCampaignId], references: [id])
  mediaSubtype      MediaSubType @relation(fields: [mediaSubtypeId], references: [id])
  pmType            PMType? @relation(fields: [pmTypeId], references: [id])

  @@map("pending_campaign_media")
}
