generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "sqlite"
  url          = "file:./golden_rules.db"
  relationMode = "prisma"
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique
  name                String?
  password            String
  role                String               @default("user")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  accessibleBrands    String?              @map("accessible_brands")
  accessibleCountries String?              @map("accessible_countries")
  accessiblePages     String?              @map("accessible_pages")
  emailVerified       Boolean?             @default(false) @map("email_verified")
  verificationToken   String?              @map("verification_token")
  passwordResetTokens PasswordResetToken[]

  @@map("users")
}

model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique(map: "sqlite_autoindex_password_reset_tokens_1")
  userId    Int       @map("user_id")
  expiresAt DateTime  @map("expires_at")
  createdAt DateTime? @default(now()) @map("created_at")
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId], map: "idx_password_reset_tokens_user_id")
  @@map("password_reset_tokens")
}

model Region {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  countries Country[]

  @@map("regions")
}

model Country {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  regionId    Int        @map("region_id")
  createdAt   DateTime   @default(now()) @map("created_at")
  subRegionId Int?       @map("sub_region_id")
  clusterId   Int?       @map("cluster_id")
  region      Region     @relation(fields: [regionId], references: [id])
  subRegion   SubRegion? @relation(fields: [subRegionId], references: [id])
  cluster     Cluster?   @relation(fields: [clusterId], references: [id])
  gamePlans   GamePlan[]
  competitorShareOfVoice CompetitorShareOfVoice[]
  mediaDiminishingReturns MediaDiminishingReturns[]

  @@map("countries")
}

model Brand {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  @@map("brands")
}

model SubRegion {
  id        Int       @id @default(autoincrement())
  name      String    @unique(map: "sqlite_autoindex_sub_regions_1")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  countries Country[]

  @@map("sub_regions")
}

model Cluster {
  id        Int       @id @default(autoincrement())
  name      String    @unique(map: "sqlite_autoindex_clusters_1")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  countries Country[]

  @@map("clusters")
}

model Category {
  id        Int               @id @default(autoincrement())
  name      String            @unique(map: "sqlite_autoindex_categories_1")
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @default(now()) @updatedAt @map("updated_at")
  ranges    CategoryToRange[]
  gamePlans GamePlan[]

  @@map("categories")
}

model Range {
  id           Int               @id @default(autoincrement())
  name         String            @unique(map: "sqlite_autoindex_ranges_1")
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @default(now()) @updatedAt @map("updated_at")
  category_id  Int?
  status       String            @default("active") @map("status")
  createdBy    String?           @map("created_by")
  reviewedBy   String?           @map("reviewed_by")
  reviewedAt   DateTime?         @map("reviewed_at")
  originalName String?           @map("original_name")
  mergedInto   Int?              @map("merged_into")
  notes        String?           @map("notes")
  categories   CategoryToRange[]
  campaigns    Campaign[]

  @@map("ranges")
}

model CategoryToRange {
  categoryId Int      @map("category_id")
  rangeId    Int      @map("range_id")
  category   Category @relation(fields: [categoryId], references: [id])
  range      Range    @relation(fields: [rangeId], references: [id])

  @@id([categoryId, rangeId])
  @@map("category_to_range")
}

model LastUpdate {
  id        Int        @id @default(autoincrement())
  name      String     @unique(map: "sqlite_autoindex_last_updates_1")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")
  gamePlans GamePlan[]

  @@map("last_updates")
}

model PMType {
  id            Int                    @id @default(autoincrement())
  name          String                 @unique(map: "sqlite_autoindex_pm_types_1")
  createdAt     DateTime               @default(now()) @map("created_at")
  updatedAt     DateTime               @default(now()) @updatedAt @map("updated_at")
  mediaSubTypes PMTypeToMediaSubType[]
  gamePlans     GamePlan[]

  @@map("pm_types")
}

model MediaType {
  id            Int            @id @default(autoincrement())
  name          String         @unique(map: "sqlite_autoindex_media_types_1")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at")
  mediaSubTypes MediaSubType[]

  @@map("media_types")
}

model MediaSubType {
  id          Int                    @id @default(autoincrement())
  name        String                 @unique(map: "sqlite_autoindex_media_sub_types_1")
  createdAt   DateTime               @default(now()) @map("created_at")
  updatedAt   DateTime               @default(now()) @updatedAt @map("updated_at")
  mediaTypeId Int?                   @map("media_type_id")
  mediaType   MediaType?             @relation(fields: [mediaTypeId], references: [id])
  pmTypes     PMTypeToMediaSubType[]
  gamePlans   GamePlan[]

  @@map("media_sub_types")
}

model PMTypeToMediaSubType {
  pmTypeId       Int          @map("pm_type_id")
  mediaSubTypeId Int          @map("media_sub_type_id")
  created_at     DateTime     @default(now())
  updated_at     DateTime     @default(now())
  pmType         PMType       @relation(fields: [pmTypeId], references: [id])
  mediaSubType   MediaSubType @relation(fields: [mediaSubTypeId], references: [id])

  @@id([pmTypeId, mediaSubTypeId])
  @@map("pm_type_to_media_sub_type")
}

model BusinessUnit {
  id        Int      @id @default(autoincrement())
  name      String?  @unique(map: "sqlite_autoindex_business_units_1")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("business_units")
}

model Campaign {
  id           Int        @id @default(autoincrement())
  name         String     @unique(map: "sqlite_autoindex_campaigns_1")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @default(now()) @updatedAt @map("updated_at")
  rangeId      Int?       @map("range_id")
  status       String     @default("active") @map("status")
  createdBy    String?    @map("created_by")
  reviewedBy   String?    @map("reviewed_by")
  reviewedAt   DateTime?  @map("reviewed_at")
  originalName String?    @map("original_name")
  mergedInto   Int?       @map("merged_into")
  notes        String?    @map("notes")
  range        Range?     @relation(fields: [rangeId], references: [id])
  gamePlans    GamePlan[]

  @@map("campaigns")
}

model GamePlan {
  id               Int          @id @default(autoincrement())
  campaignId       Int          @map("campaign_id")
  mediaSubTypeId   Int          @map("media_sub_type_id")
  pmTypeId         Int?         @map("pm_type_id")
  burst            Int          @default(1)
  startDate        String       @map("start_date")
  endDate          String       @map("end_date")
  totalBudget      Float        @map("total_budget")
  q1Budget         Float?       @map("q1_budget")
  q2Budget         Float?       @map("q2_budget")
  q3Budget         Float?       @map("q3_budget")
  q4Budget         Float?       @map("q4_budget")
  totalTrps        Float?       @map("total_trps")
  totalR1Plus      Float?       @map("total_r1_plus")
  totalR3Plus      Float?       @map("total_r3_plus")
  totalWoa         Float?       @map("total_woa")
  weeksOffAir      Float?       @map("weeks_off_air")
  nsVsWm           String?      @map("ns_vs_wm")
  createdAt        String       @default("CURRENT_TIMESTAMP") @map("created_at")
  updatedAt        String       @default("CURRENT_TIMESTAMP") @map("updated_at")
  year             Int?
  countryId        Int?         @map("country_id")
  business_unit_id Int?
  region_id        Int?
  sub_region_id    Int?
  category_id      Int?
  range_id         Int?
  last_update_id   Int?
  playbook_id      String?
  weeksLive        Float?       @map("weeks_live")
  campaign         Campaign     @relation(fields: [campaignId], references: [id])
  mediaSubType     MediaSubType @relation(fields: [mediaSubTypeId], references: [id])
  pmType           PMType?      @relation(fields: [pmTypeId], references: [id])
  country          Country?     @relation(fields: [countryId], references: [id])
  lastUpdate       LastUpdate?  @relation(fields: [last_update_id], references: [id])
  category         Category?    @relation(fields: [category_id], references: [id])

  @@map("game_plans")
}

model MediaSufficiency {
  id                             Int      @id @default(autoincrement())
  lastUpdate                     String?  @map("last_update")
  lastUpdateId                   Int?     @map("last_update_id")
  subRegion                      String?  @map("sub_region")
  subRegionId                    Int?     @map("sub_region_id")
  country                        String?
  countryId                      Int?     @map("country_id")
  bu                             String?
  buId                           Int?     @map("bu_id")
  category                       String?
  categoryId                     Int?     @map("category_id")
  range                          String?
  rangeId                        Int?     @map("range_id")
  campaign                       String?
  campaignId                     Int?     @map("campaign_id")
  franchiseNs                    String?  @map("franchise_ns")
  campaignSocioDemoTarget        String?  @map("campaign_socio_demo_target")
  totalCountryPopulationOnTarget String?  @map("total_country_population_on_target")
  tvCopyLength                   String?  @map("tv_copy_length")
  tvTargetSize                   String?  @map("tv_target_size")
  totalTrps                      Float?   @map("total_trps")
  tvR1Plus                       String?  @map("tv_r1_plus")
  tvR3Plus                       String?  @map("tv_r3_plus")
  tvIdealReach                   String?  @map("tv_ideal_reach")
  cpp2024                        Float?   @map("cpp_2024")
  cpp2025                        Float?   @map("cpp_2025")
  digitalTarget                  String?  @map("digital_target")
  digitalTargetSize              String?  @map("digital_target_size")
  digitalR1Plus                  String?  @map("digital_r1_plus")
  digitalIdealReach              String?  @map("digital_ideal_reach")
  plannedCombinedReach           String?  @map("planned_combined_reach")
  combinedIdealReach             String?  @map("combined_ideal_reach")
  digitalReachLevelCheck         String?  @map("digital_reach_level_check")
  tvReachLevelCheck              String?  @map("tv_reach_level_check")
  combinedReachLevelCheck        String?  @map("combined_reach_level_check")
  uploadedBy                     String?  @map("uploaded_by")
  uploadSession                  String?  @map("upload_session")
  // NEW FIELDS - Missing from Excel template
  tvDemoGender                   String?  @map("tv_demo_gender")
  tvDemoMinAge                   Int?     @map("tv_demo_min_age")
  tvDemoMaxAge                   Int?     @map("tv_demo_max_age")
  tvSel                          String?  @map("tv_sel")
  finalTvTarget                  String?  @map("final_tv_target")
  cpp2026                        Float?   @map("cpp_2026")
  reportedCurrency               String?  @map("reported_currency")
  isDigitalTargetSameAsTv        Boolean? @map("is_digital_target_same_as_tv")
  digitalDemoGender              String?  @map("digital_demo_gender")
  digitalDemoMinAge              Int?     @map("digital_demo_min_age")
  digitalDemoMaxAge              Int?     @map("digital_demo_max_age")
  digitalSel                     String?  @map("digital_sel")
  finalDigitalTarget             String?  @map("final_digital_target")
  digitalTargetSizeAbs           String?  @map("digital_target_size_abs")
  createdAt                      DateTime @default(now()) @map("created_at")
  updatedAt                      DateTime @updatedAt @map("updated_at")

  @@map("media_sufficiency")
}

model CompetitorShareOfVoice {
  id                     Int      @id @default(autoincrement())
  brand                  String   // "Nivea" or "Eucerin"
  category               String   // "Face Care" or medical indication like "Anti-Age"
  company                String   // "Nivea", "Eucerin", "Competitor 1", etc.
  
  // TV Data
  tvInvestment           Float?   @map("tv_investment")
  tvTrps                 Float?   @map("tv_trps")
  
  // Digital Data  
  digitalInvestment      Float?   @map("digital_investment")
  digitalImpressions     Float?   @map("digital_impressions")
  
  // Metadata
  matPeriod              String?  @map("mat_period") // "Last 12 months" or specific period
  countryId              Int?     @map("country_id")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")
  
  // Relations
  country                Country? @relation(fields: [countryId], references: [id])
  
  @@map("competitor_share_of_voice")
}

model MediaDiminishingReturns {
  id                     Int      @id @default(autoincrement())
  mediaType              String   @map("media_type") // "TV", "Digital", "Combined"
  
  // Target Demographics
  gender                 String   // "F", "M", "BG"
  minAge                 Int      @map("min_age")
  maxAge                 Int      @map("max_age")
  sel                    String?  // SEL value
  finalTarget            String   @map("final_target") // "F 18-45", "M 20-60", etc.
  saturationPoint        Float    @map("saturation_point") // 0.7768, 0.7534, etc.
  
  // Input Metrics (varies by media type)
  inputValue             Float    @map("input_value") // TRPs for TV, Budget for Digital
  inputType              String   @map("input_type") // "TRP", "Budget"
  
  // Output Metrics
  reach1Plus             Float    @map("reach_1_plus") // R1+ percentage
  frequency              Float?   // For Digital/Combined
  
  // Metadata
  countryId              Int?     @map("country_id")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")
  
  // Relations
  country                Country? @relation(fields: [countryId], references: [id])
  
  @@map("media_diminishing_returns")
}
