generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "sqlite"
  url          = "file:./golden_rules.db"
  relationMode = "prisma"
}

model User {
  id                  Int      @id @default(autoincrement())
  email               String   @unique
  name                String?
  password            String
  role                String   @default("user")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  accessibleBrands    String?  @map("accessible_brands")
  accessibleCountries String?  @map("accessible_countries")
  accessiblePages     String?  @map("accessible_pages")

  @@map("users")
}

model Region {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  countries Country[]

  @@map("regions")
}

model Country {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  regionId    Int        @map("region_id")
  createdAt   DateTime   @default(now()) @map("created_at")
  subRegionId Int?       @map("sub_region_id")
  clusterId   Int?       @map("cluster_id")
  region      Region     @relation(fields: [regionId], references: [id])
  subRegion   SubRegion? @relation(fields: [subRegionId], references: [id])
  cluster     Cluster?   @relation(fields: [clusterId], references: [id])
  gamePlans   GamePlan[]

  @@map("countries")
}

model Brand {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  @@map("brands")
}

model SubRegion {
  id        Int       @id @default(autoincrement())
  name      String    @unique(map: "sqlite_autoindex_sub_regions_1")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  countries Country[]

  @@map("sub_regions")
}

model Cluster {
  id        Int        @id @default(autoincrement())
  name      String     @unique(map: "sqlite_autoindex_clusters_1")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")
  countries Country[]

  @@map("clusters")
}

model Category {
  id        Int               @id @default(autoincrement())
  name      String            @unique(map: "sqlite_autoindex_categories_1")
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @default(now()) @updatedAt @map("updated_at")
  ranges    CategoryToRange[]
  gamePlans GamePlan[]

  @@map("categories")
}

model Range {
  id          Int               @id @default(autoincrement())
  name        String            @unique(map: "sqlite_autoindex_ranges_1")
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @default(now()) @updatedAt @map("updated_at")
  category_id Int?
  
  // Governance fields
  status       String           @default("active") @map("status")  // "active", "pending_review", "merged", "archived"
  createdBy    String?          @map("created_by")  // "import_auto", "manual", "admin"
  reviewedBy   String?          @map("reviewed_by") // Admin who reviewed
  reviewedAt   DateTime?        @map("reviewed_at") // When reviewed
  originalName String?          @map("original_name") // Original name from import
  mergedInto   Int?             @map("merged_into") // If merged into another range
  notes        String?          @map("notes") // Admin notes
  
  categories   CategoryToRange[]
  campaigns    Campaign[]

  @@map("ranges")
}

model CategoryToRange {
  categoryId Int      @map("category_id")
  rangeId    Int      @map("range_id")
  category   Category @relation(fields: [categoryId], references: [id])
  range      Range    @relation(fields: [rangeId], references: [id])

  @@id([categoryId, rangeId])
  @@map("category_to_range")
}

model LastUpdate {
  id        Int        @id @default(autoincrement())
  name      String     @unique(map: "sqlite_autoindex_last_updates_1")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")
  gamePlans GamePlan[]

  @@map("last_updates")
}

model PMType {
  id            Int                    @id @default(autoincrement())
  name          String                 @unique(map: "sqlite_autoindex_pm_types_1")
  createdAt     DateTime               @default(now()) @map("created_at")
  updatedAt     DateTime               @default(now()) @updatedAt @map("updated_at")
  mediaSubTypes PMTypeToMediaSubType[]
  gamePlans     GamePlan[]

  @@map("pm_types")
}

model MediaType {
  id            Int            @id @default(autoincrement())
  name          String         @unique(map: "sqlite_autoindex_media_types_1")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at")
  mediaSubTypes MediaSubType[]

  @@map("media_types")
}

model MediaSubType {
  id          Int                    @id @default(autoincrement())
  name        String                 @unique(map: "sqlite_autoindex_media_sub_types_1")
  createdAt   DateTime               @default(now()) @map("created_at")
  updatedAt   DateTime               @default(now()) @updatedAt @map("updated_at")
  mediaTypeId Int?                   @map("media_type_id")
  mediaType   MediaType?             @relation(fields: [mediaTypeId], references: [id])
  pmTypes     PMTypeToMediaSubType[]
  gamePlans   GamePlan[]

  @@map("media_sub_types")
}

model PMTypeToMediaSubType {
  pmTypeId       Int          @map("pm_type_id")
  mediaSubTypeId Int          @map("media_sub_type_id")
  created_at     DateTime     @default(now())
  updated_at     DateTime     @default(now())
  pmType         PMType       @relation(fields: [pmTypeId], references: [id])
  mediaSubType   MediaSubType @relation(fields: [mediaSubTypeId], references: [id])

  @@id([pmTypeId, mediaSubTypeId])
  @@map("pm_type_to_media_sub_type")
}

model BusinessUnit {
  id        Int      @id @default(autoincrement())
  name      String?  @unique(map: "sqlite_autoindex_business_units_1")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("business_units")
}

model Campaign {
  id           Int        @id @default(autoincrement())
  name         String     @unique(map: "sqlite_autoindex_campaigns_1")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @default(now()) @updatedAt @map("updated_at")
  rangeId      Int?       @map("range_id")
  
  // Governance fields
  status       String     @default("active") @map("status")  // "active", "pending_review", "merged", "archived"
  createdBy    String?    @map("created_by")  // "import_auto", "manual", "admin"
  reviewedBy   String?    @map("reviewed_by") // Admin who reviewed
  reviewedAt   DateTime?  @map("reviewed_at") // When reviewed
  originalName String?    @map("original_name") // Original name from import
  mergedInto   Int?       @map("merged_into") // If merged into another campaign
  notes        String?    @map("notes") // Admin notes
  
  range        Range?     @relation(fields: [rangeId], references: [id])
  gamePlans    GamePlan[]

  @@map("campaigns")
}

model GamePlan {
  id               Int          @id @default(autoincrement())
  campaignId       Int          @map("campaign_id")
  mediaSubTypeId   Int          @map("media_sub_type_id")
  pmTypeId         Int?         @map("pm_type_id")
  burst            Int          @default(1)
  startDate        String       @map("start_date")
  endDate          String       @map("end_date")
  totalBudget      Float        @map("total_budget")
  q1Budget         Float?       @map("q1_budget")
  q2Budget         Float?       @map("q2_budget")
  q3Budget         Float?       @map("q3_budget")
  q4Budget         Float?       @map("q4_budget")
  totalTrps        Float?       @map("total_trps")
  totalR1Plus      Float?       @map("total_r1_plus")
  totalR3Plus      Float?       @map("total_r3_plus")
  totalWoa         Float?       @map("total_woa")
  weeksOffAir      Float?       @map("weeks_off_air")
  nsVsWm           String?      @map("ns_vs_wm")
  weeksLive        Float?       @map("weeks_live")
  createdAt        String       @default("CURRENT_TIMESTAMP") @map("created_at")
  updatedAt        String       @default("CURRENT_TIMESTAMP") @map("updated_at")
  year             Int?
  countryId        Int?         @map("country_id")
  business_unit_id Int?
  region_id        Int?
  sub_region_id    Int?
  category_id      Int?
  range_id         Int?
  last_update_id   Int?
  playbook_id      String?
  campaign         Campaign     @relation(fields: [campaignId], references: [id])
  mediaSubType     MediaSubType @relation(fields: [mediaSubTypeId], references: [id])
  pmType           PMType?      @relation(fields: [pmTypeId], references: [id])
  country          Country?     @relation(fields: [countryId], references: [id])
  lastUpdate       LastUpdate?  @relation(fields: [last_update_id], references: [id])
  category         Category?    @relation(fields: [category_id], references: [id])

  @@map("game_plans")
}

model MediaSufficiency {
  id                              Int      @id @default(autoincrement())
  lastUpdate                      String?  @map("last_update")
  lastUpdateId                    Int?     @map("last_update_id")
  subRegion                       String?  @map("sub_region")
  subRegionId                     Int?     @map("sub_region_id")
  country                         String?
  countryId                       Int?     @map("country_id")
  bu                              String?
  buId                            Int?     @map("bu_id")
  category                        String?
  categoryId                      Int?     @map("category_id")
  range                           String?
  rangeId                         Int?     @map("range_id")
  campaign                        String?
  campaignId                      Int?     @map("campaign_id")
  franchiseNs                     String?  @map("franchise_ns")
  campaignSocioDemoTarget         String?  @map("campaign_socio_demo_target")
  totalCountryPopulationOnTarget  String?  @map("total_country_population_on_target")
  tvCopyLength                    String?  @map("tv_copy_length")
  tvTargetSize                    String?  @map("tv_target_size")
  woaOpenTv                       Float?   @map("woa_open_tv")
  woaPaidTv                       Float?   @map("woa_paid_tv")
  totalTrps                       Float?   @map("total_trps")
  tvR1Plus                        String?  @map("tv_r1_plus")
  tvR3Plus                        String?  @map("tv_r3_plus")
  tvIdealReach                    String?  @map("tv_ideal_reach")
  cpp2024                         Float?   @map("cpp_2024")
  cpp2025                         Float?   @map("cpp_2025")
  digitalTarget                   String?  @map("digital_target")
  digitalTargetSize               String?  @map("digital_target_size")
  woaPmFf                         Float?   @map("woa_pm_ff")
  woaInfluencersAmplification     Float?   @map("woa_influencers_amplification")
  digitalR1Plus                   String?  @map("digital_r1_plus")
  digitalIdealReach               String?  @map("digital_ideal_reach")
  plannedCombinedReach            String?  @map("planned_combined_reach")
  combinedIdealReach              String?  @map("combined_ideal_reach")
  digitalReachLevelCheck          String?  @map("digital_reach_level_check")
  tvReachLevelCheck               String?  @map("tv_reach_level_check")
  combinedReachLevelCheck         String?  @map("combined_reach_level_check")
  uploadedBy                      String?  @map("uploaded_by")
  uploadSession                   String?  @map("upload_session")
  createdAt                       DateTime @default(now()) @map("created_at")
  updatedAt                       DateTime @updatedAt @map("updated_at")

  @@map("media_sufficiency")
}
